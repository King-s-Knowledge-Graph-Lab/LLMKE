{
    "BandHasMember": "Who are the members of {subject_entity}?",
    "CityLocatedAtRiver": "Which river is {subject_entity} located at?",
    "CompanyHasParentOrganisation": "{subject_entity} is a subsidiary of which company? Return a Python list with an empty string (i.e. ['']) if none.",
    "CountryBordersCountry": "Which countries share borders with {subject_entity}?",
    "CountryHasOfficialLanguage": "What is the official language of {subject_entity}?",
    "CountryHasStates": "What are the first-level administrative territorial entities of {subject_entity}?",
    "FootballerPlaysPosition": "What position does {subject_entity} play in football?",
    "PersonCauseOfDeath": "What caused the death of {subject_entity}? If none or still alive, return '[\"\"]'.",
    "PersonHasAutobiography": "What is the title of {subject_entity}'s autobiography?",
    "PersonHasEmployer": "Who is {subject_entity}'s employer?",
    "PersonHasNoblePrize": "Which Nobel Prize did {subject_entity} receive? Select from this list: ['Nobel Peace Prize', 'Nobel Prize in Literature', 'Nobel Prize in Physics', 'Nobel Prize in Chemistry', 'Nobel Prize in Physiology or Medicine']. Return a Python list with an empty string (i.e. ['']) if none.",
    "PersonHasNumberOfChildren": "How many children does {subject_entity} have? Return the string format of the number only.",
    "PersonHasPlaceOfDeath": "Where did {subject_entity} die? Return a Python list with an empty string (i.e. ['']) if he or she is still alive.",
    "PersonHasProfession": "What is {subject_entity}'s profession or occupation?",
    "PersonHasSpouse": "What is the name of the spouse of {subject_entity}?",
    "PersonPlaysInstrument": "What instruments does {subject_entity} play?",
    "PersonSpeaksLanguage": "What languages does {subject_entity} speak?",
    "RiverBasinsCountry": "In which country can you find the {subject_entity} river basin?",
    "SeriesHasNumberOfEpisodes": "How many episodes does the series *{subject_entity}* have? Return the string format of the number.",
    "StateBordersState": "Which states border the state of {subject_entity}?",
    "CompoundHasParts": "What are the chemical components of {subject_entity}? Return the full name of components such as '[\"carbon\", \"nitrogen\"]'."
}